#import importlib
import random

import battleship

#game_code = "battleship"
#battleship = importlib.import_module(game_code)

def debugSetupShipGrid(rows, cols, ship_health):
#TODO
    #Initiate grid of targets and a matching grid of 0's waiting for ships to be added
    shipgrid = battleship.createEmptyShipGrid(rows,cols)

    #Loop through the ships and add each to the grid of ships
    #Get ship_length from the ship_health array and add 1 to the array index to provide the ship number
    for ship in range(len(ship_health)):
        ship_length = ship_health[ship]
        ship_no = ship+1
        battleship.placeShipOnShipGrid(ship_length, ship_no, shipgrid)

    return shipgrid



def debugCheckShipPlacer(rows, cols, runs):
    """Check the distribution of ships generated by the placeShipOnShipGrid function by running it "runs" many times
    """

    print("Checking the randomness of the ship placing function by running it", runs, "many times...")


    sumgrid = [[0 for i in range(cols)] for j in range(rows)]
    ship_health = [5, 4, 4]

    for i in range (runs):

        if i % (runs//10) == 0:
            if i != 0:
                print("Ships have been placed", i, "times out of", runs)

        shipgrid = debugSetupShipGrid(rows, cols, ship_health)

        for i in range(rows):
            for j in range(cols):
                sumgrid[i][j] += shipgrid[i][j]

    # Integer division by a factor proportional to the number of runs to make it easier to see approximate ship distribution
    if runs > 50:
        division_factor = runs // 50
    else:
        division_factor = 1 #because otherwise division by zero


    for i in range(rows):
        for j in range(cols):
            sumgrid[i][j] = sumgrid[i][j] // division_factor

    print("Relative ship occupancy ratios of a", rows,"X", cols,"grid after", runs, "ship placements have been run:")
    battleship.displayGrid(sumgrid)


def debugTestShipOverlap(runs):
    """Test ships don't overlap when placed in a 5 x 4 grid multiple times
    """

    print("Testing ship overlap", runs, "many times...")

    rows, cols = 5, 4
    ship_health = [5, 4, 4]

    count = 0
    for i in range (runs):

        shipgrid = debugSetupShipGrid(rows, cols, ship_health)

        #If the middle row doesn't consist of unique elements (i.e. different ships)
        if len(shipgrid[2]) != len(set(shipgrid[2])):
            count += 1 #Add one to the placement failure count and show the grid of ships
            battleship.displayGrid(shipgrid)

    print("Overlapping placements:", count)

    if count > 0:
        print("Overlap test failed")
    else:
        print("Overlap test passed")


def generateTargetList(targetgrid):
    """Make a list of targets by concatenating the 2D target grid array
    """

    target_list = []

    for row in targetgrid:
        for elem in row:
            target_list.append(elem)

    return(target_list)

def getRandomTargetFromTargetList(target_list):
    """Randomly select an element from the target list, store the element in a temporary variable,
     delete that element from the target list, then return the element stored in the temporary variable.

    """
    index = random.randrange(0,len(target_list))
    string = target_list[index]
    del target_list[index]
    return string


# def generateTarget(targetgrid, target_list):
# #TODO
#
#         user_input = getRandomTargetFroTargetList(target_list)
#
#         for row in targetgrid:
#             for target in row:
#                 if target == user_input:
#                     indices = [targetgrid.index(row), row.index(target)]
#                     return indices


#Autorun game
def debugTestGame(test_no):
#TODO
    rows, cols = 10, 10

    count = 0
    print("Running", test_no, "test games...")

    for i in range(1, test_no+1):

        ship_health = [5, 4, 4]

        targetgrid, shipgrid, ship_count, shot_outcome_string = battleship.setupGame(rows, cols, ship_health)

        target_list = generateTargetList(targetgrid)


        # testGame loop
        #1) Generate a new target
        #2) Fire at target
        while ship_count > 0:

            if len(target_list) == 0:
                #raise ValueError('No targets remaining')
                print("Game number", i, "has failed")
                count += 1
                break

            user_input = getRandomTargetFromTargetList(target_list)

            shot_outcome_string, ship_count = battleship.fireAtTarget(user_input, targetgrid, shipgrid, ship_health, ship_count)


        if i % (test_no//10) == 0:
            if (i != test_no):
                print(i, "out of", test_no, "test games finished")

    if count > 0:
        print("Games failed:", count, "out of", test_no, "completed")
    else:
        print("All test games completed successfully")


# def getSequentialTargetFromList(target_list):
#
# #TODO    """Store the first element in a temporary variable,
#     # delete that element from the target list, then return the element stored in the temporary variable.
#     #
#     # """
#     string = target_list[0]
#     del target_list[0]
#     return string



def testInputHandling():
#TODO

    input_strings_to_test = ["x", "X", "-", "J11", "Alphabet", "A100", "A1-", "1",
                            "A", "1.3", "-190.54", "+", ";",
                            "A1", "A10", "J1", "J10", "H5", # Five which should result in shots
                             "J10", "-", "x", "X",
                             ]

    rows, cols = 10, 10
    ship_health = [5, 4, 4]

    count = 0

    targetgrid, shipgrid, ship_count, shot_outcome_string = battleship.setupGame(rows, cols, ship_health)

    #TODO do


    for user_input in input_strings_to_test:

        valid_target = battleship.checkUserInput(user_input, targetgrid) #True if input matches a target

        if valid_target == True:
            count += 1
            shot_outcome_string, ship_count = battleship.fireAtTarget(user_input, targetgrid, shipgrid, ship_health, ship_count)


    if count == 5:
        print("String input test completed successfully")
    else:
         print("Input test error")



testInputHandling()

debugTestShipOverlap(10000)

rows, cols = 10, 10
debugCheckShipPlacer(rows, cols, 100000)
debugTestGame(1000)

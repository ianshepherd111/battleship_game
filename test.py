import importlib
import random

game_code = "battleship"
battleship = importlib.import_module(game_code)

#import battleship
#print(battleship.__file__)

#print(game_code, "is the module name")
#help(game_code)
#help(battleship)
#print("dir test")
#dir(battleship)
#print("end of dir")



#def debugDisplayShips(ship_grid):
#    for row in ship_grid:
#        print (' '.join(map(str,row)))


def debugCheckShipPlacer(rows, cols, runs):
    """Test the distribution of ships generated by the PlaceShip function by running it "runs" many times
    """

    print("Testing the randomness of the ship placing function by running it", runs, "many times...")


    sumgrid = [[0 for i in range(cols)] for j in range(rows)]

    for i in range (runs):

        if i % (runs//10) == 0:
            if i != 0:
                print("Ships have been placed", i, "times out of", runs)

        shipgrid = battleship.createEmptyShipGrid(rows,cols)
        health = []
        battleship.placeShip(shipgrid, health, 5)
        battleship.placeShip(shipgrid, health, 4)
        battleship.placeShip(shipgrid, health, 4)


        for i in range(rows):
            for j in range(cols):
                sumgrid[i][j] += shipgrid[i][j]

    # Integer division by a factor proportional to the number of runs to make it easier to see approximate ship distribution
    if runs > 50:
        division_factor = runs // 50
    else:
        division_factor = 1 #because otherwise division by zero


    for i in range(rows):
        for j in range(cols):
            sumgrid[i][j] = sumgrid[i][j] // division_factor

    #debugDisplayShips(sumgrid)
    print("Relative ship occupancy ratios of a", rows,"X", cols,"grid after", runs, "ship placements have been run:")
    battleship.displayGrid(sumgrid)


def debugTestShipOverlap(runs):
    """Test ships don't overlap when placed in a 5 x 3 grid multiple times
    """

    print("Testing ship overlap", runs, "many times...")

    rows, cols = 5, 3

    count = 0
    for i in range (runs):

        targetgrid = battleship.createTargetGrid(rows,cols)
        shipgrid = battleship.createEmptyShipGrid(rows,cols)

        health = []
        battleship.placeShip(shipgrid, health, 5)
        battleship.placeShip(shipgrid, health, 4)
        battleship.placeShip(shipgrid, health, 4)

        #print(len(shipgrid[0]))
        #debugDisplayShips(shipgrid)
        #print(len(set(shipgrid[0])))

        #If the middle row doesn't consists of unique elements (different ships) then:
        if len(shipgrid[2]) != len(set(shipgrid[2])):
            #Add one to the placement failure count and show the grid of ships
            count += 1
            battleship.displayGrid(shipgrid)

    if count > 0:
        print("Overlap test failed")
    else:
        print("Overlap test passed")

    print("Overlapping placements:", count)





# Test string handling
# x
# X
# -
# J11
# Alphabet
# A100
# 1
# A
# 1.3
# -190.54
# +
# ;
# A1
# A10
# J1
# J10
# J10
# - Test for miss now that A1, A10, J1 and J10 have been fired
# x

def generateTargetList(targetgrid):
    """Make a concatenated 1D array copy of the 2D target grid array
    """

    target_list = []

    for row in targetgrid:
        for elem in row:
            target_list.append(elem)

    return(target_list)

def getRandomTargetFromList(target_list):
    """Randomly select an element from the target list, store the element in a temporary variable,
     delete that element from the target list, then return the element stored in the temporary variable.

    """
    index = random.randrange(0,len(target_list))
    string = target_list[index]
    del target_list[index]
    return string



def generateTarget(targetgrid, target_list):

        valid_target = False
        error_string = "\nTarget not recognized"

        while valid_target == False:

            user_input = getRandomTargetFromList(target_list)
            #print(user_input)

            if user_input == "x" or user_input == "-":
                print(error_string)

            else:
                for row in targetgrid:
                    for available_target in row:
                        if available_target == user_input:
                            valid_target = True
                            indices = [targetgrid.index(row), row.index(available_target)]
                            return indices
                else:
                    print(error_string)




#Autorun game
def testGame(test_no):

    count = 0

    print("Running", test_no, "test games...")

    for i in range(1, test_no+1):

        #Initiate grid of targets and a matching grid waiting for ships to be added
        rows, cols = 10, 10
        targetgrid = battleship.createTargetGrid(rows,cols)
        shipgrid = battleship.createEmptyShipGrid(rows,cols)

        target_list = generateTargetList(targetgrid)

        #Initiate ship positions and ship health
        health = []
        battleship.placeShip(shipgrid, health, 5)
        battleship.placeShip(shipgrid, health, 4)
        battleship.placeShip(shipgrid, health, 4)

        ship_count = len(health)
        shot_outcome_string="" #set as empty for the first loop


        # testGame loop
        #1) Generate a new target
        #2) Fire at target
        while ship_count > 0:

            if len(target_list) == 0:
                #raise ValueError('No targets remaining')
                print("Game number", i, "has failed")
                count += 1
                break

            target = generateTarget(targetgrid, target_list)

            shot_outcome_string, ship_count = battleship.fireAtTarget(targetgrid, shipgrid, target, health, ship_count)



        if i % (test_no//10) == 0:
            if (i != test_no):
                print(i, "out of", test_no, "test games finished")

    if count > 0:
        print("Games failed:", count, "out of", test_no, "completed")
    else:
        print("All test games completed successfully")






debugTestShipOverlap(1000)

rows, cols = 10, 10
debugCheckShipPlacer(rows, cols, 50000)

testGame(1000)

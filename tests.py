import random
import battleship

def debugSetupShipGrid(rows, cols, ship_health, algorithm_bool):
    """Create an empty ship grid with dimensions, rows x cols,
    Place ships into the grid
    Return the ship grid
    """

    #Make a grid of 0's waiting for ships to be added
    shipgrid = battleship.createEmptyShipGrid(rows,cols)

    #Loop through the ships and add each to the grid of ships
    #Get ship_length from the ship_health array and add 1 to the array index to provide the ship number
    for ship in range(len(ship_health)):
        ship_length = ship_health[ship]
        ship_no = ship+1
        battleship.addShipToShipGrid(ship_length, ship_no, shipgrid, algorithm_bool)

    return shipgrid


def addShipPositionsToSumGrid(shipgrid, sumgrid, rows, cols):
    """If a square in the shipgrid is occupied, add 1 to the corresponding square in the sumgrid
    """

    for i in range(rows):
        for j in range(cols):
            if shipgrid[i][j] != 0:
                sumgrid[i][j] += 1


def getSumGridDivisor(runs, ship_health_sum, rows, cols, factor):
    """Return a divisor adjusted for the number of rows, columns,
    the ships in the grid and the ships in the grid
    """

    total_ship_health = runs * ship_health_sum
    total_grid_squares = rows * cols

    if total_ship_health > (total_grid_squares*factor):
        division_factor = total_ship_health // (total_grid_squares*factor)
    else:
        division_factor = 1 #because otherwise division by zero

    return division_factor


def updateUserEveryTenPercent(i, runs):
    """Print out message to user for each 10% of the runs completed
    """
    if (i+1) % (runs//10) == 0:
        if i != (runs-1):
            percent_completion = (i+1)*100 // runs
            print(percent_completion,"% complete")


def normalizeSumGrid(sumgrid, division_factor):
    """Divide all the values in the input grid by division_factor
    """

    rows = len(sumgrid)
    cols = len(sumgrid[0])

    for i in range(rows):
        for j in range(cols):
            sumgrid[i][j] = round(sumgrid[i][j] / division_factor)


def printNormalizedShipDistribution(rows, cols, runs, ship_health, factor, sumgrid):
    """Print out the normalized ship distribution and other parameters
    """

    print("Relative ship occupancy ratios of a", rows,"X", cols,"grid after", runs, "ship placements have been run:")
    print("Placed ships of length:", ship_health)
    print("Normalizing factor:", factor)
    battleship.displayGrid(sumgrid)


def debugCheckShipDistribution(rows, cols, runs, ship_health, single_direction_algorithm):
    """Check the distribution of ships generated by the addShipToShipGrid function by running it "runs" many times

    Place ships into the ship grid "runs" many times
    Each time the ships are placed add their positions to a total position grid
    After all the runs, normalize the total position grid so the ship distribution is easier to see
    """

    print("Checking the randomness of the ship placing function by running it", runs, "many times...")

    sumgrid = [[0 for i in range(cols)] for j in range(rows)]

    ship_health_sum = 0

    for health in ship_health:
        ship_health_sum += health

    for i in range (runs):
        shipgrid = debugSetupShipGrid(rows, cols, ship_health, single_direction_algorithm) #Put ships into ship grid
        addShipPositionsToSumGrid(shipgrid, sumgrid, rows, cols) #Add their positions to running sum
        updateUserEveryTenPercent(i, runs) # Print out progress every 10% of runs completed

    #normalize grid to make it easier to see approximate ship distribution
    normalizing_divisor = 20 # Normalizing factor to adjust the division_factor
    division_factor = getSumGridDivisor(runs, ship_health_sum, rows, cols, normalizing_divisor)
    normalizeSumGrid(sumgrid, division_factor)
    printNormalizedShipDistribution(rows, cols, runs, ship_health, normalizing_divisor, sumgrid)


def debugTestShipOverlap(runs, single_direction_bool):
    """Test ships don't overlap when placed in a 5 x 3 grid multiple times
    """

    print("Testing ship overlap", runs, "many times...")

    rows, cols = 5, 4
    ship_health = [5, 4, 4]

    count = 0
    for i in range (runs):

        shipgrid = debugSetupShipGrid(rows, cols, ship_health, single_direction_bool)

        #If the middle row doesn't consist of unique elements (i.e. different ships)
        if len(shipgrid[2]) != len(set(shipgrid[2])):
            count += 1 #Add one to the placement failure count and show the grid of ships
            battleship.displayGrid(shipgrid)

    print("Overlapping placements:", count)

    if count > 0:
        print("Overlap test failed")
    else:
        print("Overlap test passed")


def generateTargetList(targetgrid):
    """Return a list of targets made using the 2D target grid array
    """

    target_list = []

    for row in targetgrid:
        for elem in row:
            target_list.append(elem)

    return(target_list)


def getRandomTargetFromTargetList(target_list):
    """Randomly select an element from the target list, store the element in a temporary variable,
     delete that element from the target list, then return the element stored in the temporary variable.
    """

    index = random.randrange(0,len(target_list))
    string = target_list[index]
    del target_list[index]
    return string


#Autorun game
def debugTestGame(test_no, algorithm_bool):
    """Automatically play the game to test that it works

    Run the game test_no many times.
    For each test game:
    Setup the game
    Generate a list of strings that can be targeted
    Fire at targets while ships are afloat
    If run out of targets before sinking all the ships then the game has failed
    --> Add one to the failure count and print out message
    Print summary message at end of test
    """
    rows, cols = 10, 10

    count = 0
    print("Running", test_no, "test games...")

    for i in range(1, test_no+1):

        ship_health = [5, 4, 4]

        targetgrid, shipgrid, ship_count = battleship.setupGame(rows, cols, ship_health, algorithm_bool)

        target_list = generateTargetList(targetgrid)


        # testGame loop
        #1) Generate a new target
        #2) Fire at target
        while ship_count > 0:

            if len(target_list) == 0:
                #raise ValueError('No targets remaining')
                print("Game number", i, "has failed")
                count += 1
                break

            user_input = getRandomTargetFromTargetList(target_list)
            shot_outcome_string, ship_count = battleship.fireAtTarget(user_input, targetgrid, shipgrid, ship_health, ship_count)

        updateUserEveryTenPercent(i, test_no)

    if count > 0:
        print("Games failed:", count, "out of", test_no, "completed")
    else:
        print("All test games completed successfully")


def testInputHandling():
    """Test that the string input from the player will be recognized
    as a valid target when they enter a valid target. And that the string input
    from the player will not be recognized as a valid target when they enter a
    target which is not valid
    """

    input_strings_to_test = ["x", "X", "-", "J11", "Alphabet", "A100", "A1-", "1",
                            "A", "1.3", "-190.54", "+", ";",
                            " A1", "A10 ", "J1", "j10", "H5", # Five which should result in shots
                             "J10", "-", "x", "X",
                             ]

    rows, cols = 10, 10
    ship_health = [5, 4, 4]
    single_direction_algorithm = False

    targetgrid, shipgrid, ship_count = battleship.setupGame(rows, cols, ship_health, single_direction_algorithm)

    count = 0

    for user_input in input_strings_to_test:
        user_input = user_input.upper().strip()

        valid_target = battleship.checkUserInput(user_input, targetgrid) #True if input matches a target

        if valid_target == True:
            count += 1
            shot_outcome_string, ship_count = battleship.fireAtTarget(user_input, targetgrid, shipgrid, ship_health, ship_count)


    if count == 5: #5 inputs should be recognized as valid targets
        print("String input test completed successfully")
    else:
         print("Input test error", count, "tests passed")
         print("5 tests should pass")


def runtests(algorithm_bool):
    """Run the test function set for the algorithm chosen by the boolean input
    """

    debugTestShipOverlap(1000, algorithm_bool)
    debugTestGame(1000, algorithm_bool)

    rows, cols = 10, 10
    ship_health = [5, 4, 4]
    debugCheckShipDistribution(rows, cols, 100000, ship_health, algorithm_bool)
    # debugCheckShipDistribution(15, 15, 100000, ship_health, algorithm_bool)


#If launched as main program run the tests
if __name__ == "__main__":

    testInputHandling()

    print("Running tests for multiple direction per origin ship placement algorithm")
    single_direction_algorithm = False
    runtests(single_direction_algorithm)

    # print("Running tests for single direction per origin ship placement algorithm")
    #
    # single_direction_algorithm = True
    # runtests(single_direction_algorithm)
